continue
PaymentService::CONFIG["payment_api"]["url"]
PaymentService::CONFIG
continue
YamlProperties.payment_api
::YamlProperties
YamlProperties
continue
YamlProperties
continue
get_payment_response(payments, payment_id)
continue
payments[:body]["payments"].select { |payment| payment["id"] == payment_id }
payments[:body]["payments"]
continue
get_payment_response(payments, payment_id)
payments = api.get_payments({ "Authorization" => "Bearer #{bearer_token}" })
continue
{ payment: payment[:body] }
payment = payment_getter.get(payment_id, bearer_token)
payment_getter = PaymentGetter.new(payment_api)
payment_api
continue
payments[:status]
payments
continue
payments[:body]["payments"]
continue
payments[:body]["payments"]
payments[:body]
continue
payments
continue
payments
continue
payment_id
payments
get_payment_response(payments, payment_id)
continue
(payments[:status] == 401)
payments[:body]
payments[:status]
continue
payments
continue
payments
continue
payments
continue
authorization_header
continue
payment_create_params
authorization_header
continue
subject.valid?
subject
continue
subject
continue
request_validator
exit
continue
request_validator.apikey
continue
request_validator.apikey
continue
request_validator.apikey
continue
request_validator.apikey
request_validator
val.name
val = OpenStruct.new(name: "ciao")
continue
request_validator.apikey
continue
request_validator.apikey
request_validator = LoginRequest.new(username: username, apikey: "asdas")
request_validator.apikey
request_validator = LoginRequest.new(username: username, apikey: apikey)
request_validator.apikey
request_validator.errors
request_validator.valid?
request_validator.errors
continue
apikey
username
continue
request_validator.errors.messages
request_validator.errors
request_validator.valid?
continue
username
continue
params
continue
{username: username, apikey: apikey}
request.body.inspect
request.body
continue
authenticate = coolpay_api.login({username: username, apikey: apikey})
continue
authenticate = coolpay_api.login({username: username, apikey: apikey})
continue
response_body
continue
authenticate = coolpay_api.login({username: username, apikey: apikey})
JSON::Validator.validate!(LoginRequest.schema, {username: username, apikey: apikey})
continue
validate_json = JSON::Validator.fully_validate(LoginRequest.schema, {username: username, apikeys: apikey})
validate_json = JSON::Validator.fully_validate(LoginRequest.schema, {username: username, apikey: apikey})
validate_json.message
validate_json
continuevalidate_json
continue
JSON::Validator.validate(LoginRequest.schema, {username: username, apikey: apikey})
v
continue
"#{@api_url}#{method}"
JsonRequest.new("#{@api_url}#{method}", http_verb, http_headers)
http_headers
http_verb
json_request
continue
"#{@api_url}#{method}"
JsonRequest.new("#{@api_url}#{method}", http_verb, http_headers)
json_request
continue
payment_id
continue
coolpay_api.payment_id
continue
payment_id
continue
payment_id
continue
coolpay_api.payment_id
continue
params
params[:id]
payment_id
continue
payment[:body]["payment"]["id"]
payment = payment_maker.make("10.6", "GBP", recipient_id, access_token)
payment_maker = PaymentMaker.new(CoolpayApi.new)
continue
payment_id
payments
continue
payment[:body]["payment"]["id"]
payment = payment_maker.make("10.6", "GBP", recipient_id, access_token)
payment_maker = PaymentMaker.new(CoolpayApi.new)
recipient_id
continue
request.headers["HTTP_AUTHORIZATION"]
continue
response.body
continue
coolpay_api = CoolpayApi.new
CoolpayApi.new
continue
request.headers["HTTP_AUTHORIZATION"]
continue
headers
response.body
continue
headers
http_headers
@in_uri
@method
@methos
body.to_json
response = http.request(request)
body.to_json
request
response.body
continue
response.body
response.code
continue
response.inspect
response.body
response
response.status
continue
payment_status_response
continue
payment_status_response[0]
payment_status_response
continue
payments["payments"].select { |payment| payment["id"] == payment_id }
continue
params[:id]
continue
payment_id
payments["payments"].select { |payment| payment["id"] == payment_id }
payments["payments"].select { |p| payment["id"] == payment_id }
continue
payments["payments"][0]
payments[0]
 payments = api.get_payments({ "Authorization" => "Bearer #{bearer_token}" })
continue
bearer_token
continue
JSON.parse(response.body)
JSON.parse(response.body)[:recipient]
continue
response.body
continue
http_headers
continue
args
continue
http_headers
continue
http_headers
continue
args
continue
http_headers
continue
headers
continue
headers
continue
headers
continue
@http_headers
continue
request.headers["HTTP_AUTHORIZATION"].split(" ")[1]
request.headers["HTTP_AUTHORIZATION"]
   16:   en
request.headers["HTTP_AUTHORIZATION"].split(" ")[1]
continue
access_token["token"]
access_token
continue
request.headers["HTTP_AUTHORIZATION"]
continue
request.headers
request
continue
request
request.headers["HTTP_AUTHORIZATION"]
continue
request
request.headers["HTTP_AUTHORIZATION"]
request.headers["Authorization"]
continue
request.env['HTTP_AUTHORIZATION']
request
request.headers["HTTP_AUTHORIZATION"]
request.authorization
rerequest.headers["Authorization"]
continue
request.headers["HTTP_AUTHORIZATION"]
request.headers["Authorization"]
